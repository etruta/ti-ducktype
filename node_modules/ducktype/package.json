{
  "name": "ducktype",
  "version": "1.1.0",
  "description": "Flexible data validation using a duck type interface",
  "author": {
    "name": "Jos de Jong",
    "email": "wjosdejong@gmail.com"
  },
  "contributors": [
    {
      "name": "Jos de Jong",
      "email": "wjosdejong@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/josdejong/ducktype.git"
  },
  "keywords": [
    "ducktype",
    "interface",
    "data",
    "validation",
    "type",
    "type checking"
  ],
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "latest"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "main": "./ducktype.js",
  "engines": {
    "node": "*"
  },
  "readme": "# ducktype\n\nFlexible data validation using a duck type interface. For JavaScript and Node.js.\n\nAs JavaScript is a loosely typed language, any variable can contain any\ntype of data, and any type of data can be passed as arguments any function.\nWhen dealing with data inputs coming from external sources, there is a need\nto validate the type and contents of the data. Ducktype offers an easy way\nto validate both basic data types as well as complex structured data types\nin a flexible way.\n\n```js\nvar ducktype = require('ducktype');\n\nvar person = ducktype({\n  name: String,\n  age: Number\n});\n\nperson.test({name: 'John', age: 34}); // true\nperson.test({name: 'Mary'});          // false\n```\n\n\n## Install\n\n### npm\n\n```sh\nnpm install ducktype\n```\n\n### bower\n\n```sh\nbower install ducktype\n```\n\n## Load\n\n### Node.js\n\n```js\nvar ducktype = require('ducktype');\n```\n\n### browser\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n    <script src=\"ducktype.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <script type=\"text/javascript\">\n        // use ducktype...\n    </script>\n</body>\n</html>\n```\n\n## Use\n\n### Basic types\n\n```js\n// use built-in types\nducktype.number.test(2.3);      // true\nducktype.number.test('hi');     // false\nducktype.number.test(true);     // false\nducktype.date.test(new Date()); // true\nducktype.date.test(2.3);        // false\nducktype.string.test('hello');  // true\n\n// create a ducktype\nvar type = ducktype(Number);\ntype.test(2.3);                 // true\ntype.test('hi');                // false\ntype.test(true);                // false\n\n// create a ducktype with options\nvar nullableString = ducktype(String, {nullable: true});\nnullableString.test('string');  // true\nnullableString.test(null);      // true\nnullableString.test(2.3);       // false\n```\n\n### Combined types\n\n```js\n// combination of types\nvar combi = ducktype(Number, String);\ncombi.test(2.3);   // true\ncombi.test('hi');  // true\ncombi.test(true);  // false\n```\n\n### Structured objects\n\n```js\n// structured object\nvar person = ducktype({\n  name: String,\n  age: Number,\n  address: {\n    city: String,\n    street: String,\n    country: String\n  },\n  email: ducktype(String, {optional: true})\n});\n\nperson.test({\n  name: 'John',\n  age: 32,\n  address: {\n    city: 'Sunnyvale, CA 95125',\n    street: '701 First Ave.',\n    country: 'United States'\n  }\n}); // true\n\nperson.test({\n  name: 'Mary',\n  age: 26\n}); // false\n```\n\n### Structured Arrays\n\n```js\n// structured arrays\nvar numberArray = ducktype([Number]);\nnumberArray.test([1, 2, 3]);        // true\nnumberArray.test([1, 'string', 3]); // false\n\n// structured object and array\nvar family = ducktype({\n  name: String,\n  age: ducktype(Number, {optional: true}),\n  children: [\n    {\n      name: String,\n      age: ducktype(Number, {optional: true})\n    }\n  ]\n});\n\nfamily.test({\n  name: 'John',\n  children: [\n    {\n      'name': 'Mary',\n      'age': 6\n    },\n    {\n      'name': 'Grant'\n    }\n  ]\n}); // true\n\nfamily.test({\n  name: 'John',\n  children: [\n    {\n      'firstName': 'Mary',\n      'age': 6\n    },\n    {\n      'firstName': 'Grant'\n    }\n  ]\n}); // false\n```\n\n### Function arguments\n\n```js\nvar type = ducktype([Number, Number]);\n\nfunction add (a, b) {\n  type.validate(arguments);\n  return a + b;\n}\n\nvar sum = add(2, 3);        // ok\nvar sum = add(2, 'string'); // will throw a TypeError\n```\n\nAlternatively, a ducktype wrapper can be created which validates the\nfunction arguments against the ducktype:\n\n```js\nvar add = ducktype([Number, Number]).wrap(function add (a, b) {\n  return a + b;\n});\n\nvar sum = add(2, 3);        // ok\nvar sum = add(2, 'string'); // will throw a TypeError\n```\n\n\n## API\n\n### construction\n\nA ducktype can be constructed as:\n\n```\nducktype(type)\nducktype(type, options)\nducktype(type1, type2, ...)\nducktype(type1, type2, ..., options)\n```\n\nWhere:\n- `type` can be:\n  - A basic type. Choose from `Array`, `Boolean`, `Date`, `Function`, `Number`,\n    `Object`, `RegExp`, `String`, `null`, `undefined`.\n  - Another ducktype.\n  - An object. All properties of the object will be checked. Each property\n    can be a basic type, ducktype, object, or array.\n  - An array.\n    An array can have zero, one or multiple elements which can be\n    a basic type, ducktype, object, or array.\n    Providing an array with *zero* elements will just return a `ducktype(Array)`.\n    Providing an array with *one* element will return a ducktype which will\n    test each of tested arrays elements against the given type,\n    for example `ducktype([Number]).test(1, 2, 3)`.\n    Providing an array with *multiple* elements will validate the length of\n    the tested array, and validate each of the array elements one to one\n    against the provided types. This can be used to test the number and type\n    of function arguments. Example: `ducktype([Number, String]).test(2, 'str')`.\n\n- `options` is an object with properties:\n  - A string `name` (optional)\n  - A boolean `optional` (optional)\n  - A boolean `nullable` (optional)\n\nA created ducktype has functions:\n\n- `test(object)`. A function which returns true when provided object matches\n  the ducktype, and false otherwise.\n- `validate(object)`. A function which will throw a TypeError when the provided\n  object does not match the ducktype.\n- `wrap(fn)`. Creates a wrapper function around the provided function, which\n  validates the function arguments against the ducktype.\n  Only applicable for ducktypes containing an array, as the ducktype is tested\n  against an array with the function arguments.\n\n### Built-in types\n\nDucktype comes with a set of built-in types:\n\n- `ducktype.array`\n- `ducktype.boolean`\n- `ducktype.date`\n- `ducktype.function`\n- `ducktype.number`\n- `ducktype.object`\n- `ducktype.regexp`\n- `ducktype.string`\n- `ducktype.null`\n- `ducktype.undefined`\n\nThe built-in types can be used as:\n\n```js\nducktype.number.test(2.3); // true\nducktype.string.test(2.3); // false\n```\n\n\n## Test\n\nTo execute tests for the library, run:\n\n    npm test\n\n\n## Roadmap\n\n- Implement common data types like url, phone number, email, postcode, etc.\n- Implement extra options for specific types:\n  - Number: integer, min, max, finite, odd, even, positive, negative, nan, ...\n  - String: lowercase, uppercase, alpha, alphanumeric, empty, ...\n  - Array: length, length.min, length.max, ...\n- Implement a parser accepting a string describing a type in\n  [annotations](https://developers.google.com/closure/compiler/docs/js-for-compiler#types).\n- Implement support to define your own tests for custom types.\n- Implement non-strict type checking: when an object can be converted to the\n  desired type, it is ok. For example a string containing a numeric value can\n  be considered a valid Number, or a string containing an ISO date can be\n  considered a valid Date.\n\n\n## License\n\nCopyright (C) 2013 Jos de Jong <wjosdejong@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/josdejong/ducktype/issues"
  },
  "homepage": "https://github.com/josdejong/ducktype",
  "_id": "ducktype@1.1.0",
  "dist": {
    "shasum": "3578418ea22a477787e0c288994e43f1263b519e"
  },
  "_from": "ducktype@",
  "_resolved": "https://registry.npmjs.org/ducktype/-/ducktype-1.1.0.tgz"
}
